# 🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳
# DAN started 2.2 Setting up automatic deploy when pushing code
#  this was my first material use of GHA, and here on 2.7 i think it's almost done!
#
# GOOD DOCS
# Github Actions 'on' event types: https://docs.github.com/en/actions/reference/events-that-trigger-workflows
#   same doc? https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows
#
# 🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳




name: 5 Build-Push-Run Image

on: 
  workflow_dispatch:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
  build-push-run-job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 1 Doing Checkout which i forgot what this is
        run: echo "Starting up Checkout and the process in the ${{ github.event.inputs.environment }} env"


#       run docker build -t aqua-server-1 ../aqua-server-go --tag my-aqua-server-tag:$(date +%s) # this also works, but just creates another image which i dont need
      - name: 2 Build the Docker Image
        run: |
          docker build -t aqua-server-1 ../aqua-server-go
          echo "====================================="
          ls -al
          pwd


      - name: 3 Authenticate GHA with AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1


# DANLATER i need to check why the size that ECR shows the image being 100mb is so much smaller than locally 400mb (compressed?)
# DANLATER get rid of the sleep value below and replace with an if conditional or needs or something
# DANLATER fix this password warning
#         WARNING! Your password will be stored unencrypted in /home/runner/.docker/config.json.
#         Configure a credential helper to remove this warning. See
#         https://docs.docker.com/engine/reference/commandline/login/#credentials-store
      - name: 4 Log into ECR
        run: |
          echo
          echo "🔐🔐🔐🔐 aws ecr get-login-password blah blah 🔐🔐🔐🔐"
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 535002851677.dkr.ecr.us-east-1.amazonaws.com


      - name: 5 Delete any previous services running
        run: |
          echo
          echo "XXXXXXXX aws ecs delete-service blah blah XXXXXX"
          aws ecs delete-service --cluster arn:aws:ecs:us-east-1:535002851677:cluster/aqua-ecs-cluster-name --service aqua-ecs-soiviss
  

      - name: 6 Tag the Image before Uploading
        run: |
          echo
          echo "🐳🐳🐳🐳🐳🐳🐳🐳🐳 Docker images 🐳 1st view 🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳"
          docker tag aqua-server-1:latest 535002851677.dkr.ecr.us-east-1.amazonaws.com/aqua/aqua-ecr-repo-name:latest
          sleep 4
          docker images
          echo "🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳🐳"
 # DAN reminder remove the sleep call above


      - name: 7 Push Image to ECR
        run: |
          docker push 535002851677.dkr.ecr.us-east-1.amazonaws.com/aqua/aqua-ecr-repo-name:latest
          
 # Warning - if i ever change the tagging of 'aqua-subnet-public' in TF, this will break
 # DANTODO 2.7: replace these hardcoded values with env variables, and ideally the vars that i defined in tfvars
      - name: 8 Set Subnet variable
        id: aqua-subnet-step
        run: |
          echo "DANTODO: replace this awful SUBNET greg/regex with a data resource in TF"
          echo "aqua_subnet=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=aqua-subnet-public | grep SubnetId | tr -d '",' | xargs | cut -d' ' -f2)" >> $GITHUB_ENV

# DANTODO 2.7: replace these hardcoded values with env variables, and ideally the vars that i defined in tfvars
      - name: 9 Set Security Group variable
        id: aqua-security-step
        run: |
          echo "DANTODO 2.9.25: replace this SEC-GROUP greg/regex with a data resource in TF"
          echo "aqua_security_group=$(aws ec2 describe-security-groups --filters Name=group-name,Values=aqua-security-group18 | grep GroupId | tr -d '",' | xargs | cut -d' ' -f2)" >> $GITHUB_ENV



# # 💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄 
# DANLATER i need to switch to EC2 not FARGATE
# DANLATER TODO - must add to my TF code a 'force_delete' for the container on ECS and also the image on ECR 
# DANLATER - i have to delete all the images in ECR upon TF destroy
# DANLATER - remove all the hardcoded values below and replace with vars
# DANLATER -   better yet, follow rampals advice using data resources in TF to get the values
# DANTODO - TF destroy needs to delete the ECS service and the ECR image
#
#  DANTODO: i should check if a service is already running and skip this if so (so i dont get that idempotent error)

      - name: 10 Create the Service, ie Run the Image 
        env: 
          ECR_SEC_GROUP: ${{ env.aqua_security_group}}
          ECR_SUBNET: ${{ env.aqua_subnet}}
        run: |
          echo
          echo "💄 ECR SECURITY GROUP >> $ECR_SEC_GROUP <<"
          echo "💄 ECR SUBNET >> $ECR_SUBNET <<"
          echo "💄💄💄💄💄💄💄💄 aws ecs create-service 💄💄💄💄💄💄💄💄"
          aws ecs create-service \
            --cluster aqua-ecs-cluster-name \
            --task-definition aqua-ecs-task-family \
            --enable-execute-command \
            --service-name aqua-ecs-soiviss \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$ECR_SUBNET],securityGroups=[$ECR_SEC_GROUP],assignPublicIp=ENABLED}" \
            --desired-count 1
          echo "💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄💄"


# Get variables to determine IP of the service
# DANHERE 2.9 1239pm: replace these sleeps with some kind of while == NULL loop
      - name: 11 Get Task Arn
        id: get-task-arn
        run: |
          echo
          echo "DANTODO: sleeping 60 secs this could cause an Error if i dont give enough time for the variable to be created"
          sleep 60
          echo "get the task arn"
          echo "aqua_task_arn=$(aws ecs list-tasks --cluster arn:aws:ecs:us-east-1:535002851677:cluster/aqua-ecs-cluster-name | grep :task | sed 's/[[:space:]]//g' | sed 's/"//g')" >> $GITHUB_ENV
          echo "Task Arn Env Var >> ${{ env.aqua_task_arn }} << (probably empty?)" 


      - name: 12 Confirm Task ARN
        env: 
          TASK_ARN: ${{ env.aqua_task_arn}}
        run: |
          echo
          echo "Task Arn >> ${{ env.aqua_task_arn }} << (probably not empty... its somthing about going to next step)" 
          echo "aqua_eni=$(aws ecs describe-tasks --cluster arn:aws:ecs:us-east-1:535002851677:cluster/aqua-ecs-cluster-name --tasks $TASK_ARN | grep -o 'eni-[^"]*')" >> $GITHUB_ENV

          

      - name: 13 Confirm Network Interface ID
        env: 
          AQUA_ENI_YUP: ${{ env.aqua_eni }}
        run: |
          echo
          echo "Network Interface ID >> $AQUA_ENI_YUP <<"
          echo "aqua_public_ip=$(aws ec2 describe-network-interfaces --network-interface-ids $AQUA_ENI_YUP | grep PublicIp | head -n 1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_ENV
          echo "${{ env.aqua_public_ip }}"
          


      - name: 14 Show the Resulting IP Address
        env: 
          WEBSITE_IP: ${{ env.aqua_public_ip }}
        run: |
          echo
          echo "✅✅✅✅✅✅✅ Aqua server is now live.  Go to http://$WEBSITE_IP:8072 ✅✅✅✅✅✅✅"

    
              
